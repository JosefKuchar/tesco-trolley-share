(()=>{var t={225:t=>{t.exports=function(){const t=document.querySelector(".product-list");if(!t)return[];const e=function(t,e=0){const r=t[Object.keys(t).find((t=>t.startsWith("__reactFiber$")||t.startsWith("__reactInternalInstance$")))];if(null==r)return null;if(r._currentElement){let t=r._currentElement._owner;for(let r=0;r<e;r++)t=t._currentElement._owner;return t._instance}const n=t=>{let e=t.return;for(;"string"==typeof e.type;)e=e.return;return e};let o=n(r);for(let t=0;t<e;t++)o=n(o);return o.stateNode}(t).props.items;return Array.from(e).map((t=>t[1]))}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}(()=>{const t=r(225);if("undefined"==typeof sharedItems)throw new Error("You have to import items first!");const e=t(),n=sharedItems.map((t=>{const r=e.find((e=>e.product.id===t.id));if(r){if(r.customerUnitChoice!==t.unit)throw new Error(`Incompatible units! - ${t.id}`);return{id:t.id,newValue:t.quantity+r.quantity,oldValue:r.quantity,newUnitChoice:t.unit,oldUnitChoice:t.unit}}return{id:t.id,newValue:t.quantity,oldValue:0,newUnitChoice:t.unit,oldUnitChoice:t.unit}})),o={method:"PUT",headers:{"content-type":"application/json; charset=utf-8","x-csrf-token":document.querySelector("body").dataset.csrfToken},body:JSON.stringify({items:n,returnUrl:"/groceries/cs-CZ/trolley"})};fetch("/groceries/cs-CZ/trolley/items?_method=PUT",o)})()})();